id: MangaDL
description: Download mangas from mangadex and/or batoto
initialContextParameters:
  - mangadex.http.delayBetweenRequests
  - mangadex.grantType
  - mangadex.clientId
  - mangadex.clientSecret
  - mangadex.username
  - mangadex.password
  - mangadex.mangaId
  - mangadex.languages
  - mangadex.startChapter
  - mangadex.endChapter
  - mangadex.outputFolder
stages:
  - name: Fetch manga detail and chapters
    actions:
      - name: InitializeMangaDexClientInstance
        type: javaMethod
        beanName: com.ggar.orchid.plugins.mangadex.MangaDexClient
        constructorArgs:
          - "#jobContext['mangadex.clientId']"
          - "#jobContext['mangadex.clientSecret']"
          - "#jobContext['mangadex.grantType']"
          - "#jobContext['mangadex.username']"
          - "#jobContext['mangadex.password']"
          - "#jobContext['mangadex.http.delayBetweenRequests']"
        returnToContextAs: myMangaDexClient

      - name: FetchMangaDetails
        type: javaMethod
        beanName: myMangaDexClient
        method: fetchMangaDetails
        args:
          - "#jobContext['mangadex.mangaId']"
        returnToContextAs: mangaDetailsObject

      - name: FetchMangaChapters
        type: javaMethod
        beanName: myMangaDexClient
        method: fetchChapterListByUuidRange
        args:
          - "#jobContext['mangadex.mangaId']"
          - "#jobContext['mangadex.languages']"
          - "#jobContext['mangadex.startChapter']"
          - "#jobContext['mangadex.endChapter']"

      - name: AssignChaptersToDetails
        type: spel
        expression: "#jobContext['mangaDetailsObject'].setChapters(#previousResult)"

      - name: ForeachChapterGeneratePageUrls
        type: loop
        collection: "#jobContext['mangaDetailsObject'].getChapters()"
        iteratorVariable: chapter
        body:
          - name: ExtractPageUrls
            type: javaMethod
            beanName: myMangaDexClient
            method: fetchChapterPageImageUrls
            args:
              - "#chapter.getSourceId()"
              - false
              - false
          - name: ProcessEachPageUrlBytes
            type: loop
            collection: "#previousResult"
            iteratorVariable: pageUrl
            body:
              - name: FetchPageBytes
                type: javaMethod
                beanName: myMangaDexClient
                method: downloadChapterPageImage
                args:
                  - "#pageUrl"
              - name: SaveToFileSystem
                type: spel
                expression: | 
                  {{
                    T(java.nio.file.Files).createDirectories(
                      T(java.nio.file.Paths).get(#jobContext['mangadex.outputFolder']+'/'+#jobContext['mangadex.mangaId']+'/'+#chapter.getSourceId()+'/')
                    ),
                    T(java.nio.file.Files).write(
                      T(java.nio.file.Paths).get(#jobContext['mangadex.outputFolder']+'/'+#jobContext['mangadex.mangaId']+'/'+#chapter.getSourceId()+'/' + T(java.lang.System).currentTimeMillis()), 
                      #previousResult, 
                      T(java.nio.file.StandardOpenOption).CREATE, 
                      T(java.nio.file.StandardOpenOption).WRITE, 
                      T(java.nio.file.StandardOpenOption).TRUNCATE_EXISTING
                    )
                  }}